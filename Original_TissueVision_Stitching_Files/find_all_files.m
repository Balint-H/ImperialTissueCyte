function files = find_all_files( params, section )
    
    % Ok, so I know from the parameters what the files should be.
    % I will generate a list of these file paths.
    %
    % I need to return a cell array of matlab file structures
    % where each file path is listed in the order that it appears in
    % the file listing.  (Note that this should be a numerical sort
    % not an alphabetical sort).
    %
    % There is an extra field in the structure that tells us if 
    % the file was found or not.  Later processing can check that 
    % flag to deal with missing tiles. 
    %
    %#ok<*AGROW>
    
    list_files = {};
    mangled_files = {};
    for ch=1:3
        list_files = [list_files; generate_section(params, ch, section)];  
        mangled_files = [mangled_files; generate_section_mangled_filenames(params, ch, section)];
    end
    
    len = length(list_files);
    
    for i = 1:len
       f = struct();
       
       f.name = list_files{i};
       f.found_it = (2 == exist(f.name, 'file'));
       if(~f.found_it)
           % ok, so we didn't find the file.  Before putting in a 
           % blank tile, I want to check if the file got mangled 
           % by the previous version of the pipeline.
           mangled_name = mangled_files{i};
           if(2 == exist(mangled_name, 'file'))
              % Ok, I found the file with the mangled name.  I'll 
              % use that, since I know it's there.  But I'll also put a 
              % warning on the screen.  
              f.found_it = true;
              f.name = mangled_name;
              %display('Warning: Using the file format generated by the previous version');
              pause(.05)
           end
       end
       files{i} = f;
    end
    
    
   
    
end

function file_paths = generate_channel(params, channel)
    number_sections = params.sections;
    
    file_paths = {};
    
    for i = 1:number_sections
        file_paths = [file_paths; generate_section(params, channel, i)]; 
    end
end


function file_paths = generate_section(params, channel, section)
    
    
    
    [mosaic_dir mosaic_file ext] = fileparts(params.paramFileName);
    
        
    tile_base_name = find_file_name_base(params); 
    folder_base = params.SampleID;
    
    section_dir = sprintf('%s/%s-%04d/', mosaic_dir, folder_base, section);
    
    number_files_in_section = params.mcolumns*params.mrows*params.layers;
    
    file_paths = cell(number_files_in_section, 1);
    
    start_index = (section-1) * number_files_in_section;
    
    for i = 1:number_files_in_section
        path = sprintf('%s/%s-%d_%02d.tif', section_dir, tile_base_name,start_index+ i-1, channel);
        file_paths{i} = path;
    end
end



function file_paths = generate_section_mangled_filenames(params, channel, section)
    
    
    
    [mosaic_dir mosaic_file ext] = fileparts(params.paramFileName);
    
        
    tile_base_name = find_file_name_base(params); 
    folder_base = params.SampleID;
    
    section_dir = sprintf('%s/%s-%04d/', mosaic_dir, folder_base, section);
    
    number_files_in_section = params.mcolumns*params.mrows*params.layers;
    
    file_paths = cell(number_files_in_section, 1);
    
    start_index = (section-1) * number_files_in_section;
    
    for i = 1:number_files_in_section
        path = sprintf('%s/%s-%05d_%02d.tif', section_dir, tile_base_name,start_index+ i-1, channel);
        file_paths{i} = path;
    end
end



